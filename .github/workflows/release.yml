name: Build, Test, and Release

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # commitlint
      - name: Lint commit messages
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: .commitlintrc.json
        env:
          COMMIT_RANGE: ${{ github.event.before }}..${{ github.event.after }}

      # rustfmt
      - name: Check Rust code formatting
        run: cargo fmt --all --check

      # clippy
      - name: Lint Rust code
        run: cargo clippy --all-targets --all-features --locked -- -D warnings

  release:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: aarch64-unknown-linux-gnu   , os: ubuntu-22.04-arm }
          - { target: aarch64-unknown-linux-musl  , os: ubuntu-22.04-arm }
          - { target: x86_64-apple-darwin         , os: macos-13         }
          - { target: aarch64-apple-darwin        , os: macos-14         }
          - { target: x86_64-pc-windows-gnu       , os: windows-2022     }
          - { target: x86_64-pc-windows-msvc      , os: windows-2022     }
          - { target: aarch64-pc-windows-msvc     , os: windows-11-arm   }
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-22.04     }
          - { target: x86_64-unknown-linux-musl   , os: ubuntu-22.04     }
    env:
      BUILD_CMD: cargo
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
          toolchain: "${{ contains(matrix.job.target, 'windows-') && '1.88.0' || 'stable' }}"

      - name: Show toolchain info
        shell: bash
        run: |
          gcc --version || true
          rustc -V
          cargo -V
          rustup show

      - name: Build binary
        shell: bash
        run: $BUILD_CMD build --locked --release --target=${{ matrix.job.target }}

      - name: Strip binary (if non-Windows)
        if: ${{ !contains(matrix.job.target, 'windows') }}
        shell: bash
        run: |
          strip target/${{ matrix.job.target }}/release/genlint || echo "strip failed"

      - name: Run tests
        shell: bash
        run: $BUILD_CMD test --locked --release --target=${{ matrix.job.target }}

      - name: Package artifacts
        shell: bash
        run: |
          BIN_NAME=genlint
          VERSION=${GITHUB_REF##*/}

          FOLDER_NAME="${BIN_NAME}-${VERSION}-${{ matrix.job.target }}"
          mkdir -p dist "$FOLDER_NAME"

          if [[ "${{ matrix.job.target }}" == *"windows"* ]]; then
            cp "target/${{ matrix.job.target }}/release/${BIN_NAME}.exe" "$FOLDER_NAME/"
          else
            cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "$FOLDER_NAME/"
          fi

          cp -r completions/* "$FOLDER_NAME/" || echo "no completions"
          cp -r man/* "$FOLDER_NAME/" || echo "no manpages"

          if [[ "${{ matrix.job.target }}" == *"windows"* ]]; then
            7z a "dist/${FOLDER_NAME}.zip" "./${FOLDER_NAME}/*"
          else
            tar -czf "dist/${FOLDER_NAME}.tar.gz" "$FOLDER_NAME"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: ${{ matrix.job.target }}
          path: |
            dist/*

      - name: Check for release
        id: is-release
        shell: bash
        run: |
          unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/v[0-9].* ]]; then IS_RELEASE='true' ; fi
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_OUTPUT

      - name: Get token
        uses: actions/create-github-app-token@v2
        if: steps.is-release.outputs.IS_RELEASE
        id: get_token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        if: ${{ steps.get_token.outcome == 'success' }}
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
